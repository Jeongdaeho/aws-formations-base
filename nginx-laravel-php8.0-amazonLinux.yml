AWSTemplateFormatVersion: "2010-09-09"
Description: "buield default vpc"
Parameters: 
    KeyNamePublic: 
        Description: "Name of an existing EC2 KeyPair to enable SSH access to the public instances"
        Type: "AWS::EC2::KeyPair::KeyName"
        ConstraintDescription: "must be the name of an existing EC2 KeyPair."
    KeyNamePrivate: 
        Description: "Name of an existing EC2 KeyPair to enable SSH access to the private instances"
        Type: "AWS::EC2::KeyPair::KeyName"
        ConstraintDescription: "must be the name of an existing EC2 KeyPair."
    # 1. t2.micro 는 프리티어일 경우만 사용 한다.
    # 2. 되도록 최신 세대를 사용하도록한다.
    # 3. 되도록 작은 인스턴스로 시작한다.
    InstanceType: 
        Description: "WebServer EC2 instance type"
        Type : "String"
        Default: "t4g.micro"
        AllowedValues:
            - "t2.micro"
            - "t4g.micro"
            - "t4g.small"
            - "t4g.medium"
        ConstraintDescription: "must be a valid EC2 instance type."
    # ex) 사무실 IP or 개인 PC IP
    SSHLocation:
        Description: "The IP address range that can be used to SSH to the EC2 instances"
        Type: "String"
        MinLength: "9"
        MaxLength: "18"
        Default: "0.0.0.0/0"
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
    # db.t2.micro 는 프리티어일 경우 
    DBClass:
        Description: "Database instance class"
        Type: "String"
        Default : "db.t3.micro"
        AllowedValues :
            # 프리티어 가능한 경우만.
            - "db.t2.micro"
            - "db.t3.micro"
            - "db.t3.small"
            - "db.t3.medium"
            - "db.t3.large"
            - "db.m6g.large"
        ConstraintDescription: "must select a valid database instance type."
    DBName:
        Description: "database and database admin name"
        Type: "String"
        MinLength: "1"
        MaxLength: "64"
        AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
        ConstraintDescription: "must begin with a letter and contain only alphanumeric characters."
    
    DBPassword:
        Description: "database admin account password"
        Type: "String"
        MinLength: "8"
        MaxLength: "41"
        AllowedPattern: "[a-zA-Z0-9]*"
        ConstraintDescription: "must contain only alphanumeric characters."
Mappings:
    AWSInstanceType:
        # t4 세대는 arm 기반 
        t2.micro: 
            Ami: "ami-086a3601cd7a83590"
        t4g.micro: 
            Ami: "ami-0c4151369dfab2351"
        t4g.small: 
            Ami: "ami-0c4151369dfab2351"
        t4g.medium: 
            Ami: "ami-0c4151369dfab2351"
Resources:
    VPC:
        Type: "AWS::EC2::VPC"
        Properties:
            CidrBlock: "10.0.0.0/16"
            InstanceTenancy: "default"
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags:
                - Key: Name
                  Value: !Join ["", [!Ref AWS::StackName, "-VPC"]]
                - Key: Application 
                  Value: !Ref AWS::StackName
    InternetGateway:
        Type: "AWS::EC2::InternetGateway"
        Properties:
            Tags: 

                - Key: Name
                  Value: !Join ["", [!Ref AWS::StackName, "-Gateway"]]
                - Key: Application 
                  Value: !Ref AWS::StackName
    InternetGatewayAttach:
        Type: "AWS::EC2::VPCGatewayAttachment"
        Properties: 
            VpcId: !Ref VPC
            InternetGatewayId: !Ref InternetGateway
    SubnetPrivateA:
        Type: "AWS::EC2::Subnet"
        Properties: 
            CidrBlock: "10.0.0.0/24"
            AvailabilityZone: "ap-northeast-2a"
            VpcId: !Ref VPC
            Tags: 
                - Key: "Name"
                  Value: !Join ["", [!Ref AWS::StackName, "-Subnet-A-private"]]
                - Key: Application 
                  Value: !Ref AWS::StackName
    SubnetPrivateC:
        Type: "AWS::EC2::Subnet"
        Properties:
            CidrBlock: "10.0.1.0/24"
            AvailabilityZone: "ap-northeast-2c"
            VpcId: !Ref VPC
            Tags: 
                - Key: "Name"
                  Value: !Join ["", [!Ref AWS::StackName, "-Subnet-C-private"]]
                - Key: Application 
                  Value: !Ref AWS::StackName
    SubnetPublicA:
        Type: "AWS::EC2::Subnet"
        Properties:
            CidrBlock: "10.0.100.0/24"
            AvailabilityZone: "ap-northeast-2a"
            VpcId: !Ref VPC
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: "Name"
                  Value: !Join ["", [!Ref AWS::StackName, "-Subnet-A-public"]]
                - Key: Application 
                  Value: !Ref AWS::StackName
    SubnetPublicC:
        Type: "AWS::EC2::Subnet"
        Properties:
            CidrBlock: "10.0.101.0/24"
            AvailabilityZone: "ap-northeast-2c"
            VpcId: !Ref VPC
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: "Name"
                  Value: !Join ["", [!Ref AWS::StackName, "-Subnet-C-public"]]
                - Key: Application 
                  Value: !Ref AWS::StackName
    DBSubnetGroup:
        Type: "AWS::RDS::DBSubnetGroup"
        Properties:
            DBSubnetGroupDescription: "db subnet group" 
            SubnetIds: [ !Ref SubnetPrivateA, !Ref SubnetPrivateC]
            Tags: 
                - Key: "Name"
                  Value: !Join ["", [!Ref AWS::StackName, "-DBSubnetGroup"]]
                - Key: Application 
                  Value: !Ref AWS::StackName
    # NACL 생성
    # NACLPublic:
    #     Type: "AWS::EC2::NetworkAcl"
    #     Properties: 
    #         VpcId: !Ref VPC
    #         Tags: 
    #             - Key: "Name"
    #               Value: !Join ["", [!Ref AWS::StackName, "-NACL-public"]]
    #             - Key: Application 
    #               Value: !Ref AWS::StackName
    # NACL 규칙 생성     
    # InboundHTTPPublicNetworkAclEntry: 
    #     Type: "AWS::EC2::NetworkAclEntry"
    #     Properties:
    #         NetworkAclId: !Ref NACLPublic
    #         RuleNumber: 100
    #         Protocol: 6
    #         RuleAction: allow
    #         Egress: false
    #         CidrBlock: "0.0.0.0/0"
    #         PortRange: 
    #             From: "80"
    #             To: "80"
    # InboundHTTPSPublicNetworkAclEntry: 
    #     Type: "AWS::EC2::NetworkAclEntry"
    #     Properties:
    #         NetworkAclId: !Ref NACLPublic
    #         RuleNumber: 101
    #         Protocol: 6
    #         RuleAction: allow
    #         Egress: false
    #         CidrBlock: "0.0.0.0/0"
    #         PortRange: 
    #             From: "443"
    #             To: "443"
    # InboundSSHPublicNetworkAclEntry: 
    #     Type: "AWS::EC2::NetworkAclEntry"
    #     Properties:
    #         NetworkAclId: !Ref NACLPublic
    #         RuleNumber: 102
    #         Protocol: 6
    #         RuleAction: allow
    #         Egress: false
    #         CidrBlock: !Ref SSHLocation 
    #         PortRange: 
    #             From: "22"
    #             To: "22"
    # InboundEphemeralPublicNetworkAclEntry: 
    #     Type: "AWS::EC2::NetworkAclEntry"
    #     Properties:
    #         NetworkAclId: !Ref NACLPublic
    #         RuleNumber: 103
    #         Protocol: 6
    #         RuleAction: allow
    #         Egress: false
    #         CidrBlock: "0.0.0.0/0"
    #         PortRange: 
    #             From: "1024"
    #             To: "65535"
    # OutboundPublicNetworkAclEntry: 
    #     Type: "AWS::EC2::NetworkAclEntry"
    #     Properties:
    #         NetworkAclId: !Ref NACLPublic
    #         RuleNumber: 100
    #         Protocol: 6
    #         RuleAction: allow
    #         Egress: true
    #         CidrBlock: "0.0.0.0/0"
    #         PortRange: 
    #             From: "0"
    #             To: "65535"
    # Subnet, NACL 연결
    # PublicSubnetANetworkAclAssociation:
    #     Type: "AWS::EC2::SubnetNetworkAclAssociation"
    #     Properties:
    #         SubnetId: !Ref SubnetPublicA
    #         NetworkAclId: !Ref NACLPublic
    # PublicSubnetCNetworkAclAssociation:
    #     Type: "AWS::EC2::SubnetNetworkAclAssociation"
    #     Properties:
    #         SubnetId: !Ref SubnetPublicC
    #         NetworkAclId: !Ref NACLPublic
    # NACL 생성
    # NACLPrivate:
    #     Type: "AWS::EC2::NetworkAcl"
    #     Properties: 
    #         VpcId: !Ref VPC
    #         Tags: 
    #             - Key: "Name"
    #               Value: !Join ["", [!Ref AWS::StackName, "-NACL-private"]]
    #             - Key: Application 
    #               Value: !Ref AWS::StackName
    # NACL 규칙 생성     
    # InboundPrivateNetworkAclEntry: 
    #     Type: "AWS::EC2::NetworkAclEntry"
    #     Properties:
    #         NetworkAclId: !Ref NACLPrivate
    #         RuleNumber: 100
    #         Protocol: 6
    #         RuleAction: allow
    #         Egress: false
    #         CidrBlock: "0.0.0.0/0"
    #         PortRange: 
    #             From: "0"
    #             To: "65535"
    # OutBoundPrivateNetworkAclEntry: 
    #     Type: "AWS::EC2::NetworkAclEntry"
    #     Properties:
    #         NetworkAclId: !Ref NACLPrivate
    #         RuleNumber: 100
    #         Protocol: 6
    #         RuleAction: allow
    #         Egress: true
    #         CidrBlock: "0.0.0.0/0"
    #         PortRange: 
    #             From: "0"
    #             To: "65535"
    # Subnet, NACL 연결
    # PrivateSubnetNetworkAclAssociation:
    #     Type: "AWS::EC2::SubnetNetworkAclAssociation"
    #     Properties:
    #         SubnetId: !Ref SubnetPrivateA
    #         NetworkAclId: !Ref NACLPrivate
    # PrivateSubnetCNetworkAclAssociation:
    #     Type: "AWS::EC2::SubnetNetworkAclAssociation"
    #     Properties:
    #         SubnetId: !Ref SubnetPrivateC
    #         NetworkAclId: !Ref NACLPrivate
    RouteTablePrivate:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref VPC
            Tags: 
                - Key: "Name"
                  Value: !Join ["", [!Ref AWS::StackName, "-RouteTable-Private"]]
                - Key: Application 
                  Value: !Ref AWS::StackName
    RouteTablePublic:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref VPC
            Tags: 
                - Key: "Name"
                  Value: !Join ["", [!Ref AWS::StackName, "-RouteTable-Public"]]
                - Key: Application 
                  Value: !Ref AWS::StackName
    SubNetRoutePrivateA: 
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref RouteTablePrivate
            SubnetId: !Ref SubnetPrivateA
    SubNetRoutePrivateC:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref RouteTablePrivate
            SubnetId: !Ref SubnetPrivateC
    SubNetRoutePublicA:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties: 
            RouteTableId: !Ref RouteTablePublic
            SubnetId: !Ref SubnetPublicA
    SubNetRoutePublicC:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties: 
            RouteTableId: !Ref RouteTablePublic
            SubnetId: !Ref SubnetPublicC
    InternetGatewayRoutePublic:
        Type: "AWS::EC2::Route"
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            RouteTableId: !Ref RouteTablePublic
            GatewayId: !Ref InternetGateway
    # NatGateway 설정을 하지 않으면 private subnet 에 있는 인스턴스들이 업데이트가 안된다.
    NatGateway:
        Type: "AWS::EC2::NatGateway"
        Properties: 
            Tags: 
                - Key: "Name"
                  Value: !Join ["", [!Ref AWS::StackName, "-NatGateway"]]
                - Key: Application 
                  Value: !Ref AWS::StackName
            AllocationId : !GetAtt ["EIP", "AllocationId"]
            ConnectivityType: "public"
            SubnetId: !Ref SubnetPublicC
    EIP: 
        DependsOn: InternetGateway
        Type: "AWS::EC2::EIP"
        Properties: 
            Domain: "vpc"
    NatGatewayRoutePrivate:
        Type: "AWS::EC2::Route"
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            RouteTableId: !Ref RouteTablePrivate
            NatGatewayId: !Ref NatGateway
    SecurityGroupWeb:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            Name: !Join ["", [!Ref AWS::StackName, "-Web"]]
            GroupDescription: "Web Security Group"
            VpcId: !Ref VPC
            Tags: 
                - Key: "Name"
                  Value: !Join ["", [!Ref AWS::StackName, "-Web"]]
                - Key: Application 
                  Value: !Ref AWS::StackName
            SecurityGroupIngress:
                - SourceSecurityGroupId: !Ref SecurityGroupELB
                  IpProtocol: -1
                - SourceSecurityGroupId: !Ref SecurityGroupBastion
                  IpProtocol: "tcp"
                  FromPort: "22"
                  ToPort: "22"
    SecurityGroupDB: 
        Type: "AWS::EC2::SecurityGroup"
        Properties: 
            Name: !Join ["", [!Ref AWS::StackName, "-DB"]]
            GroupDescription: "DB Security Group"
            VpcId: !Ref VPC
            Tags: 
                - Key: "Name"
                  Value: !Join ["", [!Ref AWS::StackName, "-DB"]]
                - Key: Application 
                  Value: !Ref AWS::StackName
            SecurityGroupIngress:
                - IpProtocol: "tcp"
                  FromPort: "3306"
                  ToPort: "3306"
                  SourceSecurityGroupId: !Ref SecurityGroupWeb
    SecurityGroupBastion:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            Name: !Join ["", [!Ref AWS::StackName, "-Bastion"]]
            GroupDescription: "Bastion Security Group"
            VpcId: !Ref VPC
            Tags: 
                - Key: "Name"
                  Value: !Join ["", [!Ref AWS::StackName, "-Bastion"]]
                - Key: Application 
                  Value: !Ref AWS::StackName
            SecurityGroupIngress: 
                - IpProtocol: "tcp"
                  FromPort: "22"
                  ToPort: "22"
                  CidrIp: !Ref SSHLocation 
    # Load Balancer setting
    SecurityGroupELB:
        Type: AWS::EC2::SecurityGroup
        Properties:
            Name: !Join ["", [!Ref AWS::StackName, "-ELB"]]
            GroupDescription: Access to the load balancer that sits in front of ECS
            VpcId: !Ref VPC
            SecurityGroupIngress:
                # Allow access from anywhere to our ECS services
                - CidrIp: 0.0.0.0/0
                  IpProtocol: -1
            Tags:
                - Key: Name
                  Value: !Join ["", [!Ref AWS::StackName, "-LoadBalancers"]]
                - Key: Application 
                  Value: !Ref AWS::StackName
    ApplicationLoadBalancer :
        Type : "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties :
            Name: !Ref AWS::StackName
            Subnets :
                - !Ref SubnetPublicA
                - !Ref SubnetPublicC
            SecurityGroups:
                - !Ref SecurityGroupELB
            Tags:
                - Key: Name
                  Value: !Join ["", [!Ref AWS::StackName, " LoadBalancers"]]
                - Key: Application 
                  Value: !Ref AWS::StackName

    ALBTargetGroup:
        Type : "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties : 
            Name: !Ref AWS::StackName
            # aws 에서 healthcheck 할 파일. 각자 상황에 따라 설정해준다.
            HealthCheckPath: "/healthcheck.html"
            HealthCheckIntervalSeconds: 30
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2
            Port: 80
            Protocol: "HTTP"
            UnhealthyThresholdCount: 5
            VpcId: !Ref VPC
    LoadBalancerListenerHTTP:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            LoadBalancerArn: !Ref ApplicationLoadBalancer
            Port: 80
            Protocol: HTTP
            DefaultActions:
                - Type: forward
                  TargetGroupArn: !Ref ALBTargetGroup
    # LoadBalancerListenerHTTPS:
    #     Type: AWS::ElasticLoadBalancingV2::Listener
    #     Properties:
    #         LoadBalancerArn: !Ref ApplicationLoadBalancer
    #         Port: 443
    #         Protocol: HTTPS
    #         Certificates:
    #             - CertificateArn: !Ref LBCertificateArn
    #         DefaultActions:
    #             - Type: forward
    #               TargetGroupArn: !Ref ALBTargetGroup
    # private ec2 자원에 접근하기 위한 ec2
    Bastion:
        Type: "AWS::EC2::Instance"
        DependsOn: "InternetGateway"
        Properties:
            Tags:
                - Key: "Name"
                  Value: !Join ["", [!Ref AWS::StackName, "-Bastion"]]
                - Key: Application 
                  Value: !Ref AWS::StackName
            # 2021.6.29 기준 월 4200원 수준
            # InstanceType: "t4g.nano"
            # ImageId: "ami-0c4151369dfab2351"
            # 개발단계에서 프리티어 사용 가능 할 경우.
            InstanceType: "t2.micro"
            ImageId: "ami-086a3601cd7a83590"
            KeyName: !Ref KeyNamePublic
            NetworkInterfaces:
                - GroupSet: 
                    - !Ref SecurityGroupBastion
                  AssociatePublicIpAddress: true
                  DeviceIndex: "0"
                  SubnetId: !Ref SubnetPublicA
            UserData: 
                Fn::Base64: !Sub |
                    #!/bin/bash 
                    yum install -y htop nmap

    #ec2 초기 설정.
    EC2Instance: 
        Type: "AWS::EC2::Instance"
        DependsOn: "InternetGateway"
        # Metadata: 
        #   AWS::CloudFormation::Init: 
        Properties:
            Tags:
                - Key: "Name"
                  Value: !Join ["", [!Ref AWS::StackName, "-web"]]
                - Key: Application 
                  Value: !Ref AWS::StackName
            ImageId:
                # 기본 linux ami
                !FindInMap [ "AWSInstanceType", !Ref InstanceType, "Ami" ]
            InstanceType: !Ref InstanceType
            NetworkInterfaces:
                - GroupSet:
                    - !Ref SecurityGroupWeb
                  DeviceIndex: "0"
                  SubnetId: !Ref SubnetPrivateA
            KeyName: !Ref KeyNamePrivate
            UserData: 
                Fn::Base64: !Sub |
                    #!/bin/bash 
                    #최신버젼 설치.
                    apt update -y aws-cfn-bootstrap

                    # php, nginx, git 설치
                    amazon-linux-extras install -y php8.0 nginx1
                    yum install -y git php-bcmath php-mbstring php-gd php-xml php-opcache php-zip

                    # nginx 시작 프로그램 등록.
                    service nginx start

                    # composer 설치 
                    curl -sS https://getcomposer.org/installer | php >> /home/ec2-user/install.log
                    mv composer.phar /usr/local/bin/composer >> /home/ec2-user/install.log
                    ln -s /usr/local/bin/composer /usr/bin/composer >> /home/ec2-user/install.log

                    # nginx conf 수정
                    sed -i \"s/'/usr/share/nginx/htm'/'",'/home/ec2-user/www/public', "'/g\" wp-config.php\n
                    sed composer global require laravel/installer
                    #laravel 설치
                    composer global require laravel/installer >> /home/ec2-user/install.log

                    # nginx 그룹권한 추가  
                    # sudo chown -R ec2-user:nginx /home/www >> /home/ec2-user/install.log
                    usermod -a -G nginx ec2-user >> /home/ec2-user/install.log
                    # nginx 설정파일변경
                    # 시간대 변경
                    timedatectl set-timezone Asia/Seoul >> /home/ec2-user/install.log

                    # git clone https://id:password@github.com/mycompany/ExampleServer.git www
                    # chown -R ec2-user.ec2-user www

    # RDS instance
    DBInstance:
        Type: "AWS::RDS::DBInstance"
        Properties:
            DBName            : !Ref DBName
            Engine            : "MariaDB"
            MasterUsername    : !Ref DBName
            MasterUserPassword: !Ref DBPassword
            DBInstanceClass   : !Ref DBClass
            # 2021.07.01 현시점 최소 20G
            AllocatedStorage  : 20
            VPCSecurityGroups: [ !GetAtt [ "SecurityGroupDB", "GroupId"] ]
            DBSubnetGroupName : !Ref DBSubnetGroup
            Tags:
                - Key: "Name"
                  Value: !Join ["", [!Ref AWS::StackName, "-db"]]
                - Key: Application 
                  Value: !Ref AWS::StackName
    DBInstance:
        Type: "AWS::RDS::DBInstance"
        Properties:
            DBName            : !Ref DBName
            Engine            : "MariaDB"
            MasterUsername    : !Ref DBName
            MasterUserPassword: !Ref DBPassword
            DBInstanceClass   : !Ref DBClass
            # 2021.07.01 현시점 최소 20G
            AllocatedStorage  : 20
            VPCSecurityGroups: [ !GetAtt [ "SecurityGroupDB", "GroupId"] ]
            DBSubnetGroupName : !Ref DBSubnetGroup
            Tags:
                - Key: "Name"
                  Value: !Join ["", [!Ref AWS::StackName, "-db"]]
                - Key: Application 
                  Value: !Ref AWS::StackName


Outputs:
    EndpointAddress:
        Description: DB cluster endpoint address
        Value: !GetAtt DBInstance.Endpoint.Address

    EndpointPort:
        Description: DB cluster endpoint port
        Value: !GetAtt DBInstance.Endpoint.Port
